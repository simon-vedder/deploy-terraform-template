name: 'Terraform Plan'

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-*.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        environment: [dev, staging, prod]
      fail-fast: false
    
    env:
      # Environment-spezifische Variablen
      TF_VAR_environment: ${{ matrix.environment }}
      TF_VAR_location: "West Europe"
      
      # Azure Credentials
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      TF_VAR_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      
      # Backend Configuration
      TF_BACKEND_RESOURCE_GROUP: "rg-terraform-state"
      TF_BACKEND_STORAGE_ACCOUNT: ${{ secrets.TERRAFORM_STATE_STORAGE_ACCOUNT }}
      TF_BACKEND_CONTAINER: "tfstate"
      TF_BACKEND_KEY: "${{ matrix.environment }}/terraform.tfstate"

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.6.0
        terraform_wrapper: false

    - name: Azure Login via OIDC
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: Install Security Tools
      run: |
        pip install checkov
        curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=${TF_BACKEND_RESOURCE_GROUP}" \
          -backend-config="storage_account_name=${TF_BACKEND_STORAGE_ACCOUNT}" \
          -backend-config="container_name=${TF_BACKEND_CONTAINER}" \
          -backend-config="key=${TF_BACKEND_KEY}"
      working-directory: terraform/environments/${{ matrix.environment }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: terraform/environments/${{ matrix.environment }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      working-directory: terraform/environments/${{ matrix.environment }}

    - name: Security Scan - Checkov
      run: |
        checkov -d . --framework terraform --output cli --skip-check CKV_AZURE_50
      working-directory: terraform/environments/${{ matrix.environment }}
      continue-on-error: true

    - name: Security Scan - TFSec
      run: tfsec .
      working-directory: terraform/environments/${{ matrix.environment }}
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -out=tfplan
        terraform show -no-color tfplan > tfplan.txt
      working-directory: terraform/environments/${{ matrix.environment }}

    - name: Update Pull Request with Plan
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const environment = '${{ matrix.environment }}';
          const planPath = path.join('terraform', 'environments', environment, 'tfplan.txt');
          
          let planOutput = '';
          try {
            planOutput = fs.readFileSync(planPath, 'utf8');
          } catch (error) {
            planOutput = `Error reading plan file: ${error.message}`;
          }
          
          // Truncate if too long
          if (planOutput.length > 50000) {
            planOutput = planOutput.substring(0, 50000) + '\n\n... (output truncated)';
          }
          
          const commentBody = `## 🏗️ Terraform Plan - \`${environment}\`
          
          **Status:** ${{ steps.plan.outcome }}
          
          <details>
          <summary>📋 Show Terraform Plan</summary>
          
          \`\`\`terraform
          ${planOutput}
          \`\`\`
          
          </details>
          
          ---
          *Environment: \`${environment}\`*
          `;
          
          const { owner, repo } = context.repo;
          const pullNumber = context.payload.pull_request.number;
          
          // Find existing comment for this environment
          const { data: comments } = await github.rest.issues.listComments({
            owner, repo, issue_number: pullNumber
          });
          
          const existingComment = comments.find(comment => 
            comment.body.includes(`Terraform Plan - \`${environment}\``)
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner, repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner, repo,
              issue_number: pullNumber,
              body: commentBody
            });
          }